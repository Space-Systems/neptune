!==============================================================================
!
!> @anchor  test_radiation
!!
!> @brief   Program for testing functions and subs inside the radiation module  
!!
!> @author  Arkene Chouchene (AC)
!!
!> @date    <ul>
!!            <li>15.06.2023 (initial design)</li>
!!          </ul>
!!
!! @details Program for testing gravity functions in this case getSrpAcceleration and getAlbedoAcceleration
!! Sources and Examples are mentioned above every test
!------------------------------------------------------------------------
module test_radiation
use funit
use radiation
use slam_reduction_class, only: Reduction_type
use slam_math
use slam_error_handling
use satellite
use solarsystem
use Neptuneclass

implicit none

contains

   @test
   subroutine test_getSrpAcceleration()
        !Reference Values : OREKIT
        type(Radiation_class)    :: radiation_model 
        type(Satellite_class)    :: satellite_model
        type(Solarsystem_class)  :: solarsystem_model
        type(Reduction_type)     :: reduction_handler
        type(Neptune_class)      :: neptune
        real(dp), dimension(3)   :: r_gcrf
        real(dp), dimension(3)   :: v_gcrf
        real(dp)                 :: time_mjd, tolerance
        real(dp), dimension(3)   :: acc_srp,expected_srp
        type(time_t) :: epoch 
        logical :: initialized = .false.
        !** init reduction model and EOP
        call initErrorHandler(control = "YES", errAction = "RETURN", traceback = "YES") 
        if (.not. initialized) then 
        reduction_handler = Reduction_type() 
        call reduction_handler%initEop('../../work/data') 
        initialized = .true. 
        end if
        !** init solarsystem & satellite model
        ! Test 1
        epoch%mjd = 58600.d0
        solarsystem_model = Solarsystem_class()
        call solarsystem_model%initSolarSystem(   &
        "../../work/data",  &
        'DE-421',               &
        epoch &
        )
        satellite_model = Satellite_class()
        satellite_model%mass = 1.0d0
        satellite_model%cdrag = 2.5d0
        satellite_model%surface(1)%reflDiff = 0.d0
        satellite_model%surface(1)%reflSpec = 0.3d0
        satellite_model%surface(1)%area = 250.d0
        satellite_model%surface(1)%normal_angle(:) = 0.d0
        satellite_model%surface(1)%orientation = MODE_CANNON_BALL
        satellite_model%surface(1)%id = 1
        satellite_model%nsurfaces = 1
        satellite_model%isSet = .true.
        radiation_model = Radiation_class()
        call radiation_model%setShadowModel("NO_SHADOW")
        ! Set Up inputs 
        r_gcrf  = (/-42044.21889179173d0, -3193.6719204189853d0, 7000.0d0/)
        v_gcrf = (/0.23272475970034712d0, -3.0658575760606777d0, 0.0006346736275647091d0/)
        time_mjd = 58600.d0
        ! Call the subroutine to be tested
        call radiation_model%getSrpAcceleration(satellite_model, solarsystem_model, reduction_handler, r_gcrf, v_gcrf, time_mjd, acc_srp)
        ! Set up expected outputs
        expected_srp = (/-0.60255722245013490d-153, -0.40450803633383140d-153, -0.17530978208490918d-153/)

        ! Set up tolerances
        tolerance = 1e-6_dp

        ! Check if outputs match expected values
        @assertRelativelyEqual(expected_srp(1), acc_srp(1), tolerance)
        @assertRelativelyEqual(expected_srp(2), acc_srp(2), tolerance)
        @assertRelativelyEqual(expected_srp(3), acc_srp(3), tolerance)

         !** init solarsystem & satellite model
        ! Test 2
        epoch%mjd = 58600.d0
        solarsystem_model = Solarsystem_class()
        call solarsystem_model%initSolarSystem(   &
        "../../work/data",  &
        'DE-421',               &
        epoch &
        )
        satellite_model = Satellite_class()
        satellite_model%mass = 1.0d0
        satellite_model%cdrag = 2.5d0
        satellite_model%surface(1)%reflDiff = 0.d0
        satellite_model%surface(1)%reflSpec = 0.3d0
        satellite_model%surface(1)%area = 250.d0
        satellite_model%surface(1)%normal_angle(:) = 0.d0
        satellite_model%surface(1)%orientation = MODE_CANNON_BALL
        satellite_model%surface(1)%id = 1
        satellite_model%nsurfaces = 1
        satellite_model%isSet = .true.
        radiation_model = Radiation_class()
        call radiation_model%setShadowModel("NO_SHADOW")
        ! Set Up inputs 
        r_gcrf  = (/31986.08889084533d0, 3886.249797563777d0, -17606.478382491812d0/)
        v_gcrf = (/-0.1326762314352175d0, 2.0844489979862724d0, -0.13643320490635982d0/)
        time_mjd = 58600.d0
        ! Call the subroutine to be tested
        call radiation_model%getSrpAcceleration(satellite_model, solarsystem_model, reduction_handler, r_gcrf, v_gcrf, time_mjd, acc_srp)
        ! Set up expected outputs
        expected_srp = (/-0.60297265785803238d-153, -0.40499850972939443d-153, -0.17565974446211355d-153/)

        ! Set up tolerances
        tolerance = 1e-6_dp

        ! Check if outputs match expected values
        @assertRelativelyEqual(expected_srp(1), acc_srp(1), tolerance)
        @assertRelativelyEqual(expected_srp(2), acc_srp(2), tolerance)
        @assertRelativelyEqual(expected_srp(3), acc_srp(3), tolerance)

        
        ! Test 3 :
        !** init solarsystem & satellite model
        epoch%mjd = 58600.d0
        solarsystem_model = Solarsystem_class()
        call solarsystem_model%initSolarSystem(   &
        "../../work/data",  &
        'DE-421',               &
        epoch &
        )
        satellite_model = Satellite_class()
        satellite_model%mass = 1.0d0
        satellite_model%cdrag = 2.5d0
        satellite_model%surface(1)%reflDiff = 0.d0
        satellite_model%surface(1)%reflSpec = 0.3d0
        satellite_model%surface(1)%area = 250.d0
        satellite_model%surface(1)%normal_angle(:) = 0.d0
        satellite_model%surface(1)%orientation = MODE_CANNON_BALL
        satellite_model%surface(1)%id = 1
        satellite_model%nsurfaces = 1
        satellite_model%isSet = .true.
        radiation_model = Radiation_class()
        call radiation_model%setShadowModel("NO_SHADOW")
        ! Set Up inputs 
        r_gcrf  = (/-3485.799126707284d0, -5898.652976745232d0, 835.9701786284777d0/)
        v_gcrf = (/-1.3525457950562447d0, -0.2804534841971075d0, -7.4721873681232385d0/)
        time_mjd = 58600.d0
        ! Call the subroutine to be tested
        call radiation_model%getSrpAcceleration(satellite_model, solarsystem_model, reduction_handler, r_gcrf, v_gcrf, time_mjd, acc_srp)
        ! Set up expected outputs
        expected_srp = (/-0.60274248388036179d-153, -0.40477424957861742d-153, -0.17544992173487258d-153/)

        ! Set up tolerances
        tolerance = 1e-6_dp

        ! Check if outputs match expected values
        @assertRelativelyEqual(expected_srp(1), acc_srp(1), tolerance)
        @assertRelativelyEqual(expected_srp(2), acc_srp(2), tolerance)
        @assertRelativelyEqual(expected_srp(3), acc_srp(3), tolerance)

end subroutine test_getSrpAcceleration

   @test
   subroutine test_getAlbedoAcceleration()
        ! Reference Values : OREKIT
        type(Radiation_class)    :: radiation_model 
        type(Satellite_class)    :: satellite_model
        type(Solarsystem_class)  :: solarsystem_model
        type(Reduction_type)     :: reduction_handler
        type(Neptune_class)      :: neptune
        real(dp), dimension(3)   :: r_gcrf
        real(dp), dimension(3)   :: v_gcrf
        real(dp)                 :: time_mjd, tolerance
        real(dp), dimension(3)   :: expected_alb, acc_alb
        type(time_t) :: epoch 
        logical :: initialized = .false.
        !** init reduction model and EOP
        call initErrorHandler(control = "YES", errAction = "RETURN", traceback = "YES") 
        if (.not. initialized) then 
          reduction_handler = Reduction_type() 
          call reduction_handler%initEop('../../work/data') 
          initialized = .true. 
        end if
        !** init reduction model and EOP

        epoch%mjd = 58600.d0
        solarsystem_model = Solarsystem_class()
        call solarsystem_model%initSolarSystem(   &
        "../../work/data",  &
        'DE-421',               &
        epoch &
        )
        satellite_model = Satellite_class()
        satellite_model%mass = 1.0d0
        satellite_model%cdrag = 2.5d0
        satellite_model%surface(1)%reflDiff = 0.d0
        satellite_model%surface(1)%reflSpec = 0.3d0
        satellite_model%surface(1)%area = 250.d0
        satellite_model%surface(1)%normal_angle(:) = 0.d0
        satellite_model%surface(1)%orientation = MODE_CANNON_BALL
        satellite_model%surface(1)%id = 1
        satellite_model%nsurfaces = 1
        satellite_model%isSet = .true.
        radiation_model = Radiation_class()
        call radiation_model%initAlbedo()
        call radiation_model%setShadowModel("NO_SHADOW")
        ! Set Up inputs 
        r_gcrf  = (/-42044.21889179173d0, -3193.6719204189853d0, 7000.0d0/)
        v_gcrf = (/0.23272475970034712d0, -3.0658575760606777d0, 0.0006346736275647091d0/)
        time_mjd = 58600.d0
        ! Call the subroutine to be tested
        call radiation_model%getAlbedoAcceleration(satellite_model, solarsystem_model, reduction_handler, r_gcrf, v_gcrf, time_mjd, acc_alb)
       
        ! Set up expected outputs
        expected_alb = (/-1.0392032201753557d-157, -7.8937704905988008d-159 , 1.7301837762641064d-158/)
        ! Set up tolerances
        tolerance = 1e-6_dp

        ! Check if outputs match expected values
        @assertRelativelyEqual(expected_alb(1), acc_alb(1), tolerance)
        @assertRelativelyEqual(expected_alb(2), acc_alb(2), tolerance)
        @assertRelativelyEqual(expected_alb(3), acc_alb(3), tolerance)

        ! Test 2 :
        epoch%mjd = 58600.d0
        solarsystem_model = Solarsystem_class()
        call solarsystem_model%initSolarSystem(   &
        "../../work/data",  &
        'DE-421',               &
        epoch &
        )
        satellite_model = Satellite_class()
        satellite_model%mass = 1.0d0
        satellite_model%cdrag = 2.5d0
        satellite_model%surface(1)%reflDiff = 0.d0
        satellite_model%surface(1)%reflSpec = 0.3d0
        satellite_model%surface(1)%area = 250.d0
        satellite_model%surface(1)%normal_angle(:) = 0.d0
        satellite_model%surface(1)%orientation = MODE_CANNON_BALL
        satellite_model%surface(1)%id = 1
        satellite_model%nsurfaces = 1
        satellite_model%isSet = .true.
        radiation_model = Radiation_class()
        call radiation_model%initAlbedo()
        call radiation_model%setShadowModel("NO_SHADOW")
        ! Set Up inputs 
        r_gcrf  = (/-32044.21889179173d0, -3193.6719204189853d0, 7000.0d0/)
        v_gcrf = (/0.33272475970034712d0, -3.0658575760606777d0, 0.0006346736275647091d0/)
        time_mjd = 58600.d0
        ! Call the subroutine to be tested
        call radiation_model%getAlbedoAcceleration(satellite_model, solarsystem_model, reduction_handler, r_gcrf, v_gcrf, time_mjd, acc_alb)
       
        ! Set up expected outputs
        expected_alb = (/-0.16460185156863555d-156, -0.16404965687535655d-157 , 0.35956968240395888d-157/)
        ! Set up tolerances
        tolerance = 1e-6_dp

        ! Check if outputs match expected values
        @assertRelativelyEqual(expected_alb(1), acc_alb(1), tolerance)
        @assertRelativelyEqual(expected_alb(2), acc_alb(2), tolerance)
        @assertRelativelyEqual(expected_alb(3), acc_alb(3), tolerance)

        ! Test 3 :
        epoch%mjd = 58600.d0
        solarsystem_model = Solarsystem_class()
        call solarsystem_model%initSolarSystem(   &
        "../../work/data",  &
        'DE-421',               &
        epoch &
        )
        satellite_model = Satellite_class()
        satellite_model%mass = 1.0d0
        satellite_model%cdrag = 2.5d0
        satellite_model%surface(1)%reflDiff = 0.d0
        satellite_model%surface(1)%reflSpec = 0.3d0
        satellite_model%surface(1)%area = 250.d0
        satellite_model%surface(1)%normal_angle(:) = 0.d0
        satellite_model%surface(1)%orientation = MODE_CANNON_BALL
        satellite_model%surface(1)%id = 1
        satellite_model%nsurfaces = 1
        satellite_model%isSet = .true.
        radiation_model = Radiation_class()
        call radiation_model%initAlbedo()
        call radiation_model%setShadowModel("NO_SHADOW")
        ! Set Up inputs 
        r_gcrf  = (/-3485.799126707284d0, -5898.652976745232d0, 835.9701786284777d0/)
        v_gcrf = (/-1.3525457950562447d0, -0.2804534841971075d0, -7.4721873681232385d0/)
        time_mjd = 58600.d0
        ! Call the subroutine to be tested
        call radiation_model%getAlbedoAcceleration(satellite_model, solarsystem_model, reduction_handler, r_gcrf, v_gcrf, time_mjd, acc_alb)
       
        ! Set up expected outputs
        expected_alb = (/-0.40982300587138906d-155, -0.69350056733006604d-155 , 0.98284437556502546d-156/)
        ! Set up tolerances
        tolerance = 1e-6_dp

        ! Check if outputs match expected values
        @assertRelativelyEqual(expected_alb(1), acc_alb(1), tolerance)
        @assertRelativelyEqual(expected_alb(2), acc_alb(2), tolerance)
        @assertRelativelyEqual(expected_alb(3), acc_alb(3), tolerance)

   end subroutine test_getAlbedoAcceleration
   
   ! @test
! subroutine test_getShadow()

! type(Radiation_class)                  :: radiation 
! real(dp), dimension(3)                 :: r_sun
! real(dp), dimension(3)                 :: r_sat
! real                             :: expected_shadow, retreived_shadow
! Set Up inputs 
! r_sun  = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
! r_sat = (/-3485.799126707284, -5898.652976745232, 835.9701786284777/)
! !        Call the subroutine to be tested
! retreived_shadow = radiation%getShadow(radiation, r_sun, r_sat)

! Set up expected outputs
! expected_shadow = 1.d0

! Check if outputs match expected values
! @assertEqual(retreived_shadow, expected_shadow)

! end subroutine test_getShadow

end module test_radiation